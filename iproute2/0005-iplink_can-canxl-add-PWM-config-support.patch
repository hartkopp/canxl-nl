From bc43ad5d7635bd86f7aeed436eed5756e7f450c5 Mon Sep 17 00:00:00 2001
From: Oliver Hartkopp <socketcan@hartkopp.net>
Date: Tue, 20 May 2025 17:46:04 +0200
Subject: [PATCH 5/5] iplink_can: canxl: add PWM config support

Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
---
 include/uapi/linux/can/netlink.h | 15 +++++++++++
 ip/iplink_can.c                  | 44 ++++++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/include/uapi/linux/can/netlink.h b/include/uapi/linux/can/netlink.h
index 903d7f2f..79f348a5 100644
--- a/include/uapi/linux/can/netlink.h
+++ b/include/uapi/linux/can/netlink.h
@@ -146,16 +146,31 @@ enum {
 	IFLA_CAN_CTRLMODE_EXT,
 	IFLA_CAN_XL_DATA_BITTIMING,
 	IFLA_CAN_XL_DATA_BITTIMING_CONST,
 	IFLA_CAN_XL_DATA_BITRATE_CONST,
 	IFLA_CAN_XL_TDC,
+	IFLA_CAN_XL_PWM,
 
 	/* add new constants above here */
 	__IFLA_CAN_MAX,
 	IFLA_CAN_MAX = __IFLA_CAN_MAX - 1
 };
 
+/*
+ * CAN XL Transceiver data mode switching PWM configuration
+ */
+enum {
+	IFLA_CAN_PWM_UNSPEC,
+	IFLA_CAN_PWM_OFFSET,	/* u8 */
+	IFLA_CAN_PWM_LONG,	/* u8 */
+	IFLA_CAN_PWM_SHORT,	/* u8 */
+
+	/* add new constants above here */
+	__IFLA_CAN_PWM,
+	IFLA_CAN_PWM_MAX = __IFLA_CAN_PWM - 1
+};
+
 /*
  * CAN FD/XL Transmitter Delay Compensation (TDC)
  *
  * Please refer to struct can_tdc_const and can_tdc in
  * include/linux/can/bittiming.h for further details.
diff --git a/ip/iplink_can.c b/ip/iplink_can.c
index 766eadbe..88cc908f 100644
--- a/ip/iplink_can.c
+++ b/ip/iplink_can.c
@@ -27,10 +27,11 @@ static void print_usage(FILE *f)
 		"\t[ tdcv TDCV tdco TDCO tdcf TDCF ]\n"
 		"\n"
 		"\t[ xbitrate BITRATE [ xsample-point SAMPLE-POINT] ] |\n"
 		"\t[ xtq TQ xprop-seg PROP_SEG xphase-seg1 PHASE-SEG1\n \t  xphase-seg2 PHASE-SEG2 [ xsjw SJW ] ]\n"
 		"\t[ xtdcv TDCV xtdco TDCO xtdcf TDCF ]\n"
+		"\t[ pwmo PWMO pwml PWML pwms PWMS ]\n"
 		"\n"
 		"\t[ loopback { on | off } ]\n"
 		"\t[ listen-only { on | off } ]\n"
 		"\t[ triple-sampling { on | off } ]\n"
 		"\t[ one-shot { on | off } ]\n"
@@ -142,17 +143,24 @@ struct can_tdc {
 	__u32 tdcv;
 	__u32 tdco;
 	__u32 tdcf;
 };
 
+struct can_pwm {
+	__u8 pwm_offset;
+	__u8 pwm_phase_long;
+	__u8 pwm_phase_short;
+};
+
 static int can_parse_opt(struct link_util *lu, int argc, char **argv,
 			 struct nlmsghdr *n)
 {
 	struct can_bittiming bt = {}, fd_dbt = {}, xl_dbt = {};
 	struct can_ctrlmode cm = { 0 };
 	struct can_tdc fd = { .tdcv = -1, .tdco = -1, .tdcf = -1 };
 	struct can_tdc xl = { .tdcv = -1, .tdco = -1, .tdcf = -1 };
+	struct can_pwm pwm = { 0 };
 
 	while (argc > 0) {
 		if (matches(*argv, "bitrate") == 0) {
 			NEXT_ARG();
 			if (get_u32(&bt.bitrate, *argv, 0))
@@ -339,10 +347,22 @@ static int can_parse_opt(struct link_util *lu, int argc, char **argv,
 					   CAN_CTRLMODE_XL_TDC_MANUAL;
 			} else {
 				invarg("\"xtdc-mode\" must be either of \"auto\", \"manual\" or \"off\"",
 					*argv);
 			}
+		} else if (matches(*argv, "pwmo") == 0) {
+			NEXT_ARG();
+			if (get_u8(&pwm.pwm_offset, *argv, 0))
+				invarg("invalid \"pwmo\" value", *argv);
+		} else if (matches(*argv, "pwml") == 0) {
+			NEXT_ARG();
+			if (get_u8(&pwm.pwm_phase_long, *argv, 0))
+				invarg("invalid \"pwml\" value", *argv);
+		} else if (matches(*argv, "pwms") == 0) {
+			NEXT_ARG();
+			if (get_u8(&pwm.pwm_phase_short, *argv, 0))
+				invarg("invalid \"pwms\" value", *argv);
 		} else if (matches(*argv, "xlrrs") == 0) {
 			NEXT_ARG();
 			set_ctrlmode("xlrrs", *argv, &cm,
 				     CAN_CTRLMODE_XL_RRS);
 		} else if (matches(*argv, "xltrx") == 0) {
@@ -414,10 +434,22 @@ static int can_parse_opt(struct link_util *lu, int argc, char **argv,
 			addattr32(n, 1024, IFLA_CAN_TDC_TDCO, xl.tdco);
 		if (xl.tdcf != -1)
 			addattr32(n, 1024, IFLA_CAN_TDC_TDCF, xl.tdcf);
 		addattr_nest_end(n, tdc);
 	}
+	if (pwm.pwm_offset || pwm.pwm_phase_long || pwm.pwm_phase_short) {
+		struct rtattr *xlpwm = addattr_nest(n, 1024,
+						  IFLA_CAN_XL_PWM | NLA_F_NESTED);
+
+		if (pwm.pwm_offset)
+			addattr8(n, 1024, IFLA_CAN_PWM_OFFSET, pwm.pwm_offset);
+		if (pwm.pwm_phase_long)
+			addattr8(n, 1024, IFLA_CAN_PWM_LONG, pwm.pwm_phase_long);
+		if (pwm.pwm_phase_short)
+			addattr8(n, 1024, IFLA_CAN_PWM_SHORT, pwm.pwm_phase_short);
+		addattr_nest_end(n, xlpwm);
+	}
 
 	return 0;
 }
 
 static const char *can_state_names[CAN_STATE_MAX] = {
@@ -807,10 +839,22 @@ static void can_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
 				   dbitrate_const[i]);
 		}
 		close_json_array(PRINT_ANY, " ]");
 	}
 
+	if (tb[IFLA_CAN_XL_PWM]) {
+		struct can_pwm *pwm =
+			RTA_DATA(tb[IFLA_CAN_XL_PWM]);
+
+		open_json_object("xl_pwm");
+		can_print_nl_indent();
+		print_uint(PRINT_ANY, "pwmo", " pwmo %u", pwm->pwm_offset);
+		print_uint(PRINT_ANY, "pwml", " pwml %u", pwm->pwm_phase_long);
+		print_uint(PRINT_ANY, "pwms", " pwms %u", pwm->pwm_phase_short);
+		close_json_object();
+	}
+
 	if (tb[IFLA_CAN_TERMINATION_CONST] && tb[IFLA_CAN_TERMINATION]) {
 		__u16 *trm = RTA_DATA(tb[IFLA_CAN_TERMINATION]);
 		__u16 *trm_const = RTA_DATA(tb[IFLA_CAN_TERMINATION_CONST]);
 		int trm_cnt = RTA_PAYLOAD(tb[IFLA_CAN_TERMINATION_CONST]) /
 			sizeof(*trm_const);
-- 
2.47.2

