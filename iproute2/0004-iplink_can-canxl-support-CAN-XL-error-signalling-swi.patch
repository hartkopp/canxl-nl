From b219db5f70b247bd289941cfee81c5cedead2f2d Mon Sep 17 00:00:00 2001
From: Oliver Hartkopp <socketcan@hartkopp.net>
Date: Tue, 20 May 2025 08:31:57 +0200
Subject: [PATCH 4/5] iplink_can: canxl: support CAN XL error signalling
 switching

For CAN CC and CAN FD the generation of error frames on the CAN bus in the
case of detected protocol violations is a mandatory feature.
With CAN XL utilizing a switchable CAN XL transceiver with a different
physical layer the error signalling is not possible when the transceiver
is switched into the new data mode physical layer.
When operating a CAN controller in CAN CC/FD/XL mode (XL = enabled!) with
a 'normal' CAN (FD) transceiver that does not switch the physical layer in
the data section the user can decide whether the error signalling is
enabled/disabled for all CAN protocols.

Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
---
 include/uapi/linux/can/netlink.h | 1 +
 ip/iplink_can.c                  | 6 ++++++
 2 files changed, 7 insertions(+)

diff --git a/include/uapi/linux/can/netlink.h b/include/uapi/linux/can/netlink.h
index bea58373..903d7f2f 100644
--- a/include/uapi/linux/can/netlink.h
+++ b/include/uapi/linux/can/netlink.h
@@ -106,10 +106,11 @@ struct can_ctrlmode {
 #define CAN_CTRLMODE_XL			0x800	/* CAN XL mode */
 #define CAN_CTRLMODE_XL_TDC_AUTO	0x1000	/* XL transceiver automatically calculates TDCV */
 #define CAN_CTRLMODE_XL_TDC_MANUAL	0x2000	/* XL TDCV is manually set up by user */
 #define CAN_CTRLMODE_XL_RRS		0x4000	/* XL enable RRS bit access */
 #define CAN_CTRLMODE_XL_TRX		0x8000	/* XL switch trx in data phase */
+#define CAN_CTRLMODE_XL_ERR_SIGNAL	0x10000	/* XL error signalling */
 
 /*
  * CAN device statistics
  */
 struct can_device_stats {
diff --git a/ip/iplink_can.c b/ip/iplink_can.c
index 18854c2b..766eadbe 100644
--- a/ip/iplink_can.c
+++ b/ip/iplink_can.c
@@ -42,10 +42,11 @@ static void print_usage(FILE *f)
 		"\t[ tdc-mode { auto | manual | off } ]\n"
 		"\t[ xl { on | off } ]\n"
 		"\t[ xtdc-mode { auto | manual | off } ]\n"
 		"\t[ xlrrs { on | off } ]\n"
 		"\t[ xltrx { on | off } ]\n"
+		"\t[ xlerrsig { on | off } ]\n"
 		"\n"
 		"\t[ restart-ms TIME-MS ]\n"
 		"\t[ restart ]\n"
 		"\n"
 		"\t[ termination { 0..65535 } ]\n"
@@ -127,10 +128,11 @@ static void print_ctrlmode(enum output_type t, __u32 flags, const char* key)
 	print_flag(t, &flags, CAN_CTRLMODE_XL, "XL");
 	print_flag(t, &flags, CAN_CTRLMODE_XL_TDC_AUTO, "XL-TDC-AUTO");
 	print_flag(t, &flags, CAN_CTRLMODE_XL_TDC_MANUAL, "XL-TDC-MANUAL");
 	print_flag(t, &flags, CAN_CTRLMODE_XL_RRS, "XL-RRS");
 	print_flag(t, &flags, CAN_CTRLMODE_XL_TRX, "XL-TRX");
+	print_flag(t, &flags, CAN_CTRLMODE_XL_ERR_SIGNAL, "XL-ERR-SIGNAL");
 
 	if (flags)
 		print_hex(t, NULL, "%x", flags);
 
 	close_json_array(t, "> ");
@@ -345,10 +347,14 @@ static int can_parse_opt(struct link_util *lu, int argc, char **argv,
 				     CAN_CTRLMODE_XL_RRS);
 		} else if (matches(*argv, "xltrx") == 0) {
 			NEXT_ARG();
 			set_ctrlmode("xltrx", *argv, &cm,
 				     CAN_CTRLMODE_XL_TRX);
+		} else if (matches(*argv, "xlerrsig") == 0) {
+			NEXT_ARG();
+			set_ctrlmode("xlerrsig", *argv, &cm,
+				     CAN_CTRLMODE_XL_ERR_SIGNAL);
 		} else if (matches(*argv, "restart") == 0) {
 			__u32 val = 1;
 
 			addattr32(n, 1024, IFLA_CAN_RESTART, val);
 		} else if (matches(*argv, "restart-ms") == 0) {
-- 
2.47.2

